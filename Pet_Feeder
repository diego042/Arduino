#include <Servo.h> // Biblioteca para controle de servos

// Definição dos pinos utilizados
const int PINO_TRIG = 3;
const int PINO_ECHO = 4;
const int PINO_SERVO = 2;

// Variável para armazenar a posição do servo
int posicaoServo = 0;

// Criação do objeto servo
Servo servo;

void setup() {

  // Configuração de pinos
  pinMode(PINO_TRIG, OUTPUT); // Pino que envia pulso para medir a distância
  pinMode(PINO_ECHO, INPUT);  // Pino que recebe o eco do sensor
  pinMode(PINO_SERVO, OUTPUT);// Pino que controla o servo

  // Define TRIG inicialmente em nível LOW
  digitalWrite(PINO_TRIG, LOW);

  // Anexa o servo ao pino definido
  servo.attach(PINO_SERVO);

  // Inicializa o servo na posição 0° (fechado)
  servo.write(0);
}

void loop() {

  // Envia um pulso de 10 microssegundos para o sensor ultrassônico
  // para que ele emita o sinal sonoro
  digitalWrite(PINO_TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(PINO_TRIG, LOW);

  // Medição do tempo que o pino ECHO fica em HIGH (retorno do sinal)
  unsigned long tempoEco = pulseIn(PINO_ECHO, HIGH);

  // Cálculo da distância em centímetros
  // Fórmula aproximada: distância (cm) = tempoEco / 58
  unsigned long distancia = tempoEco / 58;

  // Reset da posição do servo antes de cada checagem
  posicaoServo = 0;

  // Se a distância for menor que 20 cm, aciona a "alimentação"
  if (distancia < 20)
  {
    // Move o servo para a posição inicial (normalmente 0°)
    servo.write(posicaoServo);

    // Aguarda um instante para garantir a estabilidade
    delay(100);

    // Gira o servo para 45° (ou qualquer ângulo necessário para liberar o petisco)
    posicaoServo = posicaoServo + 45;
    servo.write(posicaoServo);

    // Aguarda 500 ms para o petisco cair
    delay(500);

    // Retorna o servo para a posição 0° (fechado)
    posicaoServo = 0;
    servo.write(posicaoServo);
  }

  // Intervalo de 1 segundo antes de realizar a próxima leitura
  delay(1000);
}
